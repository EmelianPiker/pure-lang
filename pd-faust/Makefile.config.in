
# -*- makefile-gmake -*-

# Location of the main source directory. To be overridden in submakefiles.
srcdir = .

# Platform-specific setup. The Makefile should get this right in most cases.
# If not, then you might want to edit some of the settings below or simply
# pass the corresponding variables on the make command line.

# Package version.
version = @version@

# Try to guess the host system type.
host = $(shell $(srcdir)/config.guess)

#PIC = -fPIC # uncomment for x86-64 compilation
DLL = .so
shared = -shared

# Take care of some common systems.
ifneq "$(findstring -mingw,$(host))" ""
# Windows
EXE = .exe
DLL = .dll
LIBPD = -lpd
endif
ifneq "$(findstring -darwin,$(host))" ""
# OSX
DLL = .dylib
shared = -dynamiclib
endif
ifneq "$(findstring x86_64-,$(host))" ""
# 64 bit, needs -fPIC flag
PIC = -fPIC
endif

# Pd flavour (e.g., pd, pd-extended, pd-l2ork, etc.)
PD=pd

# Pd executable name variants.
PDEXE=$(subst pd-extended,pdextended,$(PD))

# Try to guess the Pd installation prefix:
prefix = $(patsubst %/bin/$(PDEXE)$(EXE),%,$(shell which $(PDEXE) 2>/dev/null))
ifeq ($(strip $(prefix)),)
# Fall back to /usr/local.
prefix = /usr/local
endif

# Installation goes into $(libdir)/$(PD), you can also set this directly
# instead of $(prefix).
libdir = $(prefix)/lib
includedir = $(prefix)/include

# Specific setup for the various Pd flavours.
ifeq ($(PD),purr-data)
PD_INC=/purr-data
endif
ifeq ($(PD),pd-l2ork)
PD_INC=/pd-l2ork
endif
ifeq ($(PD),pd-extended)
PD_INC=/pdextended
endif

# Pd include path. This is searched for m_pd.h if we have it. Otherwise the
# generic header file pd/m_pd.h in the sources is used. This enables us to
# compile pd-faust on systems where Pd isn't installed in the usual places
# (most importantly, Mac and Windows).
pdincdir = $(includedir)$(PD_INC)

# Pd library path.
pdlibdir = $(libdir)/$(PD)

# Install dir for the externals and accompanying stuff.
pdextradir = $(pdlibdir)/extra/faust

# Figure out the Pd external suffix.
PDDLL = $(DLL)
ifneq "$(findstring -linux,$(host))" ""
# Linux
PDDLL = .pd_linux
endif
ifneq "$(findstring -darwin,$(host))" ""
# OSX (untested)
PDDLL = .pd_darwin
endif

ifneq "$(findstring -mingw,$(host))" ""
ifeq "$(PD)" "pd"
ifneq "$(wildcard /c/Program*/Pd/src/m_pd.h)" ""
# Special case: Vanilla Pd on Windows. This assumes an existing Pd
# installation in the "Program Files" folder. Note that installing directly
# into $(pdlibdir) will fail (permission problem), thus you'll have to install
# into a staging directgory instead (using DESTDIR) and then manually copy
# files over.
pdlibdir = $(wildcard /c/Program*/Pd)
pdincdir = "$(pdlibdir)/src"
LIBPD = "$(pdlibdir)/bin/pd.dll"
endif
endif
ifneq "$(PD)" "pd"
ifneq "$(wildcard /c/Program*/Purr*Data/include/m_pd.h)" ""
# Special case: Purr Data flavor of Pd on Windows. This will be tried anyway
# if $(PD) is set to anything else but "pd".
pdlibdir = $(wildcard /c/Program*/Purr*Data)
pdincdir = "$(pdlibdir)/include"
LIBPD = -L"$(pdlibdir)/bin" -lpd
endif
endif
endif
