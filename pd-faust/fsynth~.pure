
using pdfaust;
using namespace pdfaust;

// Lexicographic order of tuples so that they can be used as dictionary keys.
(x1,y1) < (x2,y2) = x1<x2 || x1==x2 && y1<y2;

#! --required fsynth_dsp
fsynth_dsp name instance chan::int nvoices::int =
  catch error (k,l,fsynth with

  // bang outputs the current (non-voice) control values in OSC format.
  fsynth bang = out when
    out = map (\(id=>ptr) -> oscid id $ get_control ptr) (get ctrls!0);
  end;

  // write writes the current control values as MIDI and OSC controller
  // messages to the special "midiout" and "oscout" receivers.
  fsynth write = () when
    // Also output scribble strips to the special "midistrip" receiver.
    do (pd_send "midistrip") $
    catmap (\(id=>ptr) -> stripvals id $ get_control ptr) (get ctrls!0);
    do (pd_send "midiout") $
    catmap (\(id=>ptr) -> midivals id $ get_control ptr) (get ctrls!0);
    do (pd_send "oscout") $
    catmap (\(id=>ptr) -> oscvals id $ get_control ptr) (get ctrls!0);
  end;

  // write with an argument (a flag) puts the unit in "writing" mode in which
  // MIDI and OSC output is generated in response to controller messages.
  fsynth (write val) = () when
    put writing (val~=0);
  end;

  // reload reloads the Faust synth.
#! --ifdef oldreload
  // This is the old reload mechanism, which is rather complicated and can't
  // deal with changes in the inlet/outlet configuration. You only want to use
  // this if you're still running an older pd-pure version.
  fsynth reload = catch (cst ().error) (() when
    // Uninstall receivers for the previous GUI elements.
    do (\(id=>ptr) -> pd_unreceive id) (get ctrls!0);
    // Get rid of the old synths.
    do faust_exit $ get syn;
    // Initialize the new synths.
    dsp = load_dsp name samplerate; dsp_source name;
    put syn {faust_clone dsp | i = 1..nvoices};
    // Reinitialize the GUI and grab the control variables.
    zipwith put [vctrls,ctrls,octrls,defaults,ctrlmap,oscmap] [vc,c,oc,df,cm,om] when
      vc,c,oc,df,cm,om = create_gui {faust_info s!2 | s = get syn};
    end;
    clear devctrls;
    do (\(id=>ptr) -> insert devctrls (id=>())) (get ctrls!0);
    put rctrlmap $ ordmdict [id=>(n,args) | n=>(id,args) = get ctrlmap];
    put roscmap $ ordmdict [id=>p | p=>id = get oscmap];
    put ctrlmap $ ordmdict
    [c | c@(n=>(id,args)) = get ctrlmap; ~member (get octrls) id];
    put oscmap $ ordmdict
    [c | c@(p=>id) = get oscmap; ~member (get octrls) id];
    // Reset all voices.
    put voc initvoc;
    put active 1;
    put writing 0; put recording 0;
    // Give some feedback that we're up and running again.
    pd_post $ sprintf "%s (%s): %d inputs, %d outputs, %d voices *** reloaded ***"
    (instance,name,k,l,nvoices);
  end);
#! --else
  // With the latest pd-pure, we can now just reload ourselves and be done
  // with it.
  fsynth reload = pd_reload;
#! --endif

  fsynth (reload _) = fsynth reload; // reload receiver

  // The dsp loop.
  fsynth in::matrix = sum,cout when
    // render all the voices
    do (\(syn,out) -> faust_compute syn in out) (zip (get syn) out);
    // mix down to a single stereo signal
    //sum = foldl1 (zipwith (+)) out;
    mix out sum;
    cout = if get active then control_out else ();
  end;

  // Update the passive controls. (Doing this for each dsp cycle is a cpu hog,
  // so we only update the controls after some given time has passed.) Note
  // that for compatibility with older pd-faust versions you can also set
  // pdfaust::hide_passive to disable this.
  control_out = () when
    do (\(id=>ptr) -> pd_send id (control_val ptr)) (get octrls);
    // Also update external MIDI/OSC controllers in write mode, for passive
    // controls which have a MIDI or OSC controller assigned to them.
    ~get writing ||
    (do (pd_send "midiout") $
     catmap (\(id=>ptr) -> midivals id $ control_val ptr) (get octrls));
    ~get writing ||
    (do (pd_send "oscout") $
     catmap (\(id=>ptr) -> oscvals id $ control_val ptr) (get octrls));
  end if ~hide_passive && do_controls with
    do_controls = put lasttime time $$ true
      if time >= get lasttime + update_time when time = pd_time end;
    = false otherwise;
  end;
  = () otherwise;
  // Aggregation of passive controller values. We don't know what these values
  // are, so we simply output the maximum value of all voices for each passive
  // control here. This should give sensible readings independently of how the
  // values are calculated and what ranges they cover.
  control_val (p:ptrs) = foldl (\x p -> max x (get_control p))
    (get_control p) ptrs;

  // Respond to note messages.
  fsynth (note num vel ch) = () if ~get active;
  // For convenience, if in omni mode ignore channel 10 = GM percussion.
  = () if chan && ch~=chan || ~chan && ch==10;
  = () when
    num = int num; vel = int vel; ch = int ch;
    // note on: allocate (or steal) a voice
    i,v = alloc (get voc) (ch,num); put voc v;
    //printf "[%d] %d %d %d\n" (i,num,vel,ch);
    // update the control variables
    {freq,gain,gate} = get vctrls!i!!["freq","gain","gate"];
    put_control freq (midicps (num+get_bend ch+get_tune ch num));
    put_control gain (vel/127);
    trigger!i < pd_time ||
    // Force a voice to be retriggered immediately by resetting its gate and
    // reading a single sample.
    /* XXXFIXME: This is a simplistic approach to fix voice collisions on the
       spot. It works reasonably well for percussive instruments, but in
       general the note-on should be delayed until the reassigned voice has
       had a chance to complete its envelope. As things stand now, the
       existing note is terminated immediately, which may lead to audible
       clicks. You'll have to allocate more voices in order to avoid these. */
    (put_control gate 0.0 $$ faust_compute (get syn!i) in1 out1);
    put_control gate 1.0;
  end if vel > 0; // note on
  = () when
    num = int num; vel = int vel; ch = int ch;
    // note off: deallocate a voice
    case dealloc (get voc) (ch,num) of
      i,v = () when
	// printf "[%d] %d %d %d\n" (i,num,vel,ch);
	put voc v;
	// update the control variables
	gate = get vctrls!i!"gate";
	put_control gate 0.0;
	insert trigger (i=>pd_time);
      end;
      // note not on at present, ignore
      _ = ();
    end;
  end; // note off

  // Respond to pitch bend messages.
  fsynth (bend val ch) = ()
    if ~get active || chan && ch~=chan || ~chan && ch==10;
  = () when
    val = int val; ch = int ch;
    set_bend ch (2*(val-8192)/8192);
    do adjust_freq (get_notes (get voc) ch) with
      adjust_freq (num=>i) = put_control freq (midicps (num+get_bend ch+get_tune ch num)) when
	freq = get vctrls!i!"freq";
      end;
    end;
  end;

  // Respond to MTS messages.
  fsynth (sysex data) = () if ~get active;
  = case decode_mts data of
    rt,ch,t = () when
      // we convert the list of tuning offsets to a vector here, which allows
      // constant-time accesses
      t = vector t;
      // Update the tuning tables for each channel.
      do (\ch -> set_tune ch t) ch;
      // If this is a realtime message then we also want to adjust notes which
      // are already playing.
      ~rt || do (\ch -> do (adjust_freq ch) (get_notes (get voc) ch)) ch with
	adjust_freq ch (num=>i) = put_control freq (midicps (num+get_bend ch+get_tune ch num)) when
	  freq = get vctrls!i!"freq";
	end;
      end;
    end;
    _ = ();
  end with
    decode_mts data = () if ~listp data || ~all doublep data;
    decode_mts (id:_) = () if id ~= 0x7e && id ~= 0x7f;
    decode_mts data = case map int data of
      // we only handle octave-based tunings here
      id:_:8:8:msk1:msk2:msk3:data = rt,ch,t when
	// 1-byte encoding (-64..63 ct), check for realtime message
	rt = id == 0x7f;
	// extract the list of MIDI channels for which this tuning is valid;
	// this is given as a 3 byte sequence (21 bits in total, with the most
	// significant byte first) which is to be interpreted as a bitmask
	ch = decode_chans msk1 msk2 msk3;
	t = [(x-64)/100.0 | x = data];
	//pd_post $ sprintf "MTS 1-byte: %s" (str t);
      end if #data == 12;
      id:_:8:9:msk1:msk2:msk3:data = rt,ch,t when
	// 2-byte encoding (-100..100 ct, resolution approx. 1/100 ct)
	rt = id == 0x7f;
	ch = decode_chans msk1 msk2 msk3;
	// the tuning offsets are given as 14 bit quantities here, as usual
	// the MSBs come first
	even = 0:2..22; odd = 1:3..23;
	data = zipwith (\msb lsb -> (msb<<7) or lsb) (data!!even) (data!!odd);
	t = [(x-8192)/8192.0 | x = data];
	//pd_post $ sprintf "MTS 2-byte: %s" (str t);
      end if #data == 24;
      _ = ();
    end;
    decode_chans msk1 msk2 msk3 = [i+1 | i = 0..15; (1<<i) and msk] when
      msk = (msk1<<14) or (msk2<<7) or msk3;
    end;
  end;

  // Controller 123. Turn all notes off, on the given channel.
  fsynth (ctl val num ch) = () if chan && ch~=chan || ~chan && ch==10;
  fsynth (ctl val num ch) = () when
    ch = int ch;
    do note_off (get_notes (get voc) ch) with
      note_off (num=>i) = fsynth (note num 0 ch);
    end;
  end if num==123;

  // Stop message. Turn all notes off, on all channels.
  fsynth stop = () when
    do (flip put_control 0.0 . (!"gate")) $ get vctrls;
    put voc initvoc;
  end;

  // Other MIDI controllers.
  fsynth (ctl val num ch) = () if chan && ch~=chan || ~chan && ch==10;
  fsynth (ctl val num ch) = () when
    num = int num;
    ~member (get ctrlmap) num ||
    do send (get ctrlmap!num) with
      send (id,args) = send_reg id $ map_ctrl args val;
    end;
  end;

  // Send a controller value to the GUI and also store it in devctrls. This
  // prevents the value to be reemitted in write mode, in order to avoid
  // feedback loops with external MIDI and OSC controllers. XXXFIXME: We
  // should distinguish between different external controllers here, so that
  // parameters can be kept in sync if they are mapped to different devices.
  send_reg id val = insert devctrls (id=>val) $$ pd_send id val;

  // Controller messages.
  fsynth (id@_ val) = out when
    oldval = get_control (get ctrls!0!id);
    out = if val===bang then
      do (\c -> put_control (c!id) 1.0) $ get ctrls $$
      // schedule the button release
      pd_delay delay_time (id 0.0)
    else
      do (\c -> put_control (c!id) val) $ get ctrls;
    val = if val===bang then 1.0 else val;
    // In recording mode send the messages in OSC format to the oscrecord
    // receiver. This is to be used by automation.
    ~(get recording && val~==oldval) || pd_send "oscrecord" (oscid id val);
    // In writing mode output MIDI/OSC controller messages for all defined
    // MIDI and OSC controllers ('midi' and 'osc' attributes in the Faust
    // source), to sync external MIDI and OSC controllers.
    oldval = devctrls!id; newval = ~eq_ctrl val oldval;
    ~(get writing && newval) || do (pd_send "midiout") (midivals id val);
    ~(get writing && val~==oldval) || do (pd_send "oscout") (oscvals id val);
    ~get writing || insert devctrls (id=>val);
  end if member (get ctrls!0) id;

  // Convert controller messages to the corresponding MIDI/OSC messages.
  midivals id val =
    [ctl (rmap_ctrl args val) n chan | n,args = get rctrlmap!id] if chan;
  // omni mode
  = [ctl (rmap_ctrl args val) n ch | n,args = get rctrlmap!id;
     ch = 1..16; ch~=10];
  oscvals id val = [p val | p = get roscmap!id];
  // scribble strip descriptions
  stripvals id val =
    [strip id (ctrl_min args) (ctrl_max args) (ctrl_step args) (rmap_ctrl args val) n chan | n,args = get rctrlmap!id];

  // Special 'init' control.
  fsynth (id@_ val) = () when
    do (\(id=>val) -> pd_send id val) $ get defaults;
  end if id === init_sym;

  // Special 'active' control.
  fsynth (id@_ val) = () when
    put active (val~=0);
    get active || fsynth stop;
  end if id === active_sym;

  // Special 'record' control.
  fsynth (id@_ val) = () when
    put recording (val~=0);
  end if id === record_sym;

  /* Default OSC message processing. OSC messages are denoted by a leading
     "/". We translate these to the corresponding Faust controls on the fly.
     The special 'init' and 'active' controls are also supported. OSC path
     mappings in the Faust source ('osc' attribute) are handled as well. */
  fsynth (id@(_::string) val) = case tail id of
    _ = do (flip send_reg val) (get oscmap!id)
      if member (get oscmap) id;
    id = pd_send id val
      if member (get ctrls!0) id || any (==id) [init_sym, active_sym];
    _ = (); // ignore
  end if ~null id && id!0=="/";

  /* Global receiver. This is normally used as a convenience to distribute
     symbolic MIDI data to all Faust dsps in a patch, but can in fact be used
     to pass *any* message recognized by faust~ objects. */
  fsynth (faustdsp msg) = fsynth msg;

  /* OSC playback. This is to be used by automation. Only the proper OSC paths
     are recognized here, in the same format as they are output to the
     "oscrecord" receiver. */
  fsynth (oscplay bang) = () when
    // report all current controller settings
    out = map (\(id=>ptr) -> oscid id $ get_control ptr) (get ctrls!0);
    do (pd_send "oscrecord") out;
  end if get recording;
  fsynth (oscplay (id@(_::string) val)) = case tail id of
    id = put_control (get ctrls!0!id) val $$ pd_send id val
      if member (get ctrls!0) id;
    _ = (); // ignore
  end if ~null id && id!0=="/";

  // Check for sysex messages. These are delivered as Pd meta messages with a
  // variable number of data byte arguments which is rather inconvenient, so
  // we massage them into a form which can be parsed more easily.
  fsynth msg = case a [] msg of
    id:data = fsynth (sysex data) if id === sysex;
    // Ignore everything else.
    // _ = pd_post $ sprintf "unknown: %s" $ str msg;
    _ = ();
  end with
    // A little helper function to convert a multi-arg function application
    // into a list, you can find this in the Pure manual.
    a xs (x@_ y) = a (y:xs) x; a xs x = x:xs;
  end;

  // Translate MIDI note numbers to frequencies in Hz.
  midicps num = 440*2^((num-69)/12);

  // Keep track of pitch bends.
  set_bend chan val = insert bend (chan=>val);
  get_bend chan = if member bend chan then bend!chan else 0.0;

  // Keep track of MTS tunings.
  set_tune chan tuning = insert tune (chan=>tuning);
  get_tune chan num = //debug_mts (member tune chan) chan num
    (if member tune chan then tune!chan!(num mod 12) else 0.0);
  debug_mts dbg chan num val = val when
    ~dbg ||
    pd_post (sprintf "tuning ch#%d, note %d => %g ct" (chan,num,val*100));
  end;

end when
  nvoices > 0 || throw "fsynth~: bad number of voices";
  // Special control symbols to reset controls to their defaults and change
  // the activation status of the synth. These are the same for all synths.
  init_sym = control_sym instance "init";
  active_sym = control_sym instance "active";
  record_sym = control_sym instance "record";
  // Last time for passive controller update.
  lasttime = ref pd_time;
  // Load the Faust dsp.
  dsp = load_dsp name samplerate; dsp_source name;
  // Initialize the synth voices.
  syn = ref {faust_clone dsp | i = 1..nvoices};
  faust_exit dsp;
  // Get the number of inputs and outputs (these can't be changed later).
  k,l,_ = faust_info (get syn!0);
  // Initialize the GUI and grab the control variables.
  vctrls,ctrls,octrls,defaults,ctrlmap,oscmap = ref vc,ref c,ref oc,ref df,ref cm,ref om when
    vc,c,oc,df,cm,om = create_gui {faust_info s!2 | s = get syn};
  end;
  devctrls = orddict [id=>() | id=>ptr = get ctrls!0];
  rctrlmap = ref $ ordmdict
    [id=>(n,args) | n=>(id,args) = get ctrlmap;
     ~hide_passive || ~member (get octrls) id];
  roscmap = ref $ ordmdict
    [id=>p | p=>id = get oscmap;
     ~hide_passive || ~member (get octrls) id];
  // Remove the passive controls from the MIDI and OSC controller maps. Only
  // the active controls can be set from incoming MIDI and OSC messages. Note
  // that we do this after computing the reverse mappings, as we normally want
  // the passive controls to be included there.
  put ctrlmap $ ordmdict
  [c | c@(n=>(id,args)) = get ctrlmap; ~member (get octrls) id];
  put oscmap $ ordmdict
  [c | c@(p=>id) = get oscmap; ~member (get octrls) id];
  // Create the signal buffers.
  n = blocksize;
  out = smatrix [dmatrix (l,n) | i = 1..nvoices];
  sum = dmatrix (l,n);
  // Dummy signal buffers for retriggering a stolen voice.
  in1 = dmatrix (k,1); out1 = dmatrix (l,1);
  // Create the initial voice allocation.
  voc = ref initvoc;
  trigger = orddict [i-1 => 0.0 | i = 1..nvoices];
  // Pitch bends.
  bend = orddict [];
  // Tunings.
  tune = orddict [];
  // Activity flag.
  active = ref 1;
  // Writing and recording flags.
  writing = ref 0; recording = ref 0;
  // Give some feedback that we're up and running.
  pd_post $ sprintf "%s (%s): %d inputs, %d outputs, %d voices"
  (instance,name,k,l,nvoices);
end with

  // Convert controller symbols to the corresponding OSC pathname.
  oscid id::string = "/"+id;
  oscid id = oscid (str id) otherwise;

  // Helper functions for analyzing controller symbols.
  is_voice_control id = any (==basename id) ["freq","gain","gate"];
  basename id = last $ split "/" id;

  // pdfaustui mangles the control names, adjust the faustui names accordingly.
  adjust_controls ctrls = {control_sym instance id => ptr | id=>ptr = ctrls};

  // Load a Faust dsp.
  load_dsp name::string samplerate::int = dsp when
    fname = libsearch synthdir name;
    dsp = faust_init fname samplerate;
    pointerp dsp || throw $ sprintf "fsynth~: error loading '%s'" name;
  end;

  // Set the menu-open filename, if we can locate the dsp source file.
  dsp_source name::string = pd_setfile fname if pointerp (fopen fname "r") when
    fname = libsearch synthdir (name+".dsp");
  end;

  // Create the GUI.
  create_gui ui = vctrls,ctrls,octrls,defaults,ctrlmap,oscmap when
    // Get a map with the fully qualified names of the controls for each voice.
    pctrls = map (control_map.pcontrols) ui;
    // The metadata will be the same for each voice.
    ctrl_descr = pcontrols (ui!0);
    ctrl_refs = transpose $ map (map control_ref.pcontrols) $ list ui with
      transpose [] = [];
      transpose xs@(x:_) = foldr (zipwith (:)) [[] | i = 1..#x] xs;
    end;
    pmeta = control_metamap ctrl_descr;
    /* Extract the "voice" controls. These are the freq, gain and gate
       controls which may differ depending on which note is being played on a
       voice. Note that we only use the basenames of the controls here. Also
       note that we extract the controls in reverse, in case a control name
       occurs more than once. That's because it's the *last* member for a
       given key in a Pure record which gets chosen (which then corresponds to
       the first control of that name in the original UI description). */
    vctrls = map filter_controls pctrls with
      filter_controls ctrls = record c when
	c = reverse {basename id => ptr | id=>ptr = ctrls; is_voice_control id};
	// We assume that these controls are always present, so provide some
	// dummy values in case they aren't.
	c = {"freq"=>(),"gain"=>(),"gate"=>(),c};
      end;
    end;
    /* Grab the auxiliary (non-voice) controls. In contrast to the voice
       controls these are always kept in lockstep. Also note that here we have
       to adjust the control names so that they match up with the actual
       control symbols used in the pdfaustui-generated patch, which are
       prefixed with the instance name for disambiguation purposes and mangled
       to become valid Pd symbols. */
    ctrls = map (adjust_controls.filter_controls) pctrls with
      filter_controls ctrls =
	{id=>ptr | id=>ptr = ctrls; ~is_voice_control id};
    end;
    meta = adjust_controls pmeta;
    // Get the default values of the auxiliary controls.
    defaults = {id => get_control ptr | id=>ptr = ctrls!0};
    // Extract the active (input) and passive (output) controls.
    ictrls,octrls =
      {control_label c => control_ref c | c = ctrl_descr;
       ~is_passive_control c && ~is_voice_control (control_label c)},
      {control_label c => r | c,r = zip ctrl_descr ctrl_refs;
       is_passive_control c && ~is_voice_control (control_label c)}
    with
      is_passive_control c = any (===control_type c) [hbargraph,vbargraph];
    end;
    ictrls = adjust_controls ictrls;
    octrls = adjust_controls octrls;
    // Construct the MIDI and OSC controller maps.
    ctrlargs = adjust_controls
      {control_label c => control_type c (control_args c) | c = ctrl_descr};
    ctrlmap = ordmdict
      [post (n => (id,ctrlargs!id)) |
       id=>ptr = ctrls!0; m = meta!id; n = ctrl_num m]
    with
      ctrl_num ("midi"=>v) = case catch (\_->()) (sscanf v "%s %s") of
	"ctrl",s = case val s of n::int = [n]; _ = [] end;
	_ = [] otherwise;
      end;
      ctrl_num _ = [];
      post c@(n=>(id,_)) = c when
	~verbose_ctrlmap || pd_post (sprintf "%s: ctrl %d" (id,n));
      end;
    end;
    oscmap = ordmdict
      [post (p => id) | id=>ptr = ctrls!0; m = meta!id; p = osc_path m]
    with
      osc_path ("osc"=>v) = [oscid v];
      osc_path _ = [];
      oscid v::string = "/"+v if null v || v!0~="/";
      oscid v = v otherwise;
      post c@(p=>id) = c when
	~verbose_oscmap || pd_post (sprintf "%s: %s" (id,p));
      end;
    end;
    // Create the Pd GUI.
    gui = sprintf "pd-%s" instance;
    wd,ht,objs = make_gui instance nvoices (ui!0);
    // Set the GOP area and fill the GUI patch.
    pd_send gui clear;
    pd_send gui (coords 0 (-1) 1 1 wd ht 1 0 0);
    do (pd_send gui) objs;
    // Initialize the GUI elements.
    do (\(id=>ptr) -> pd_send id (get_control ptr)) (ctrls!0);
    // Install receivers for the active GUI elements.
    do (\(id=>ptr) -> pd_receive id) ictrls;
    // Install receivers for the special init, active and record controls.
    pd_receive (control_sym instance "init");
    pd_receive (control_sym instance "active");
    pd_receive (control_sym instance "record");
    // Install a global receiver for Faust dsps.
    pd_receive "faustdsp";
    // Install a receiver for OSC playback (automation).
    pd_receive "oscplay";
    // Install a receiver for reload messages (remote control).
    pd_receive "reload";
  end;

  // A simple voice allocation algorithm.
  initvoc = orddict [],[],0..nvoices-1;
  // note plays already, reuse existing voice
  alloc voc@(notes,used,free) note = notes!note,voc if member notes note;
  // use an unused voice if available
  alloc (notes,used,i:free) note = i,insert notes (note=>i),used+[i],free;
  // steal a voice from the longest sounding note
  alloc (notes,i:used,free) note = i,insert notes (note=>i),used+[i],free;
  // free a voice
  dealloc (notes,used,free) note = i,delete notes note,filter (~=i) used,
    free+[i] when i = notes!note end if member notes note;
  // note not allocated, return a sentinel value
  dealloc _ _ = -1;
  // get all notes playing on a given channel
  get_notes (notes,used,free) chan =
    [num=>i | (ch,num)=>i = list notes; ch==chan];

end when
  name = if symbolp name then str name else name;
  instance = if symbolp instance then str instance else instance;
  stringp name && stringp instance ||
  throw "fsynth~: bad name or instance parameter";
  chan>=0 && chan<=16 || throw "fsynth~: bad MIDI channel parameter";
end);
